import { Command } from 'commander';
import { ConfigManager } from './utils/config.js';

const program = new Command();

program
  .name('rag-tool')
  .description('TypeScript-based RAG tool with contextual retrieval')
  .version('0.1.0');

// Init command placeholder
program
  .command('init')
  .description('Initialize RAG tool configuration')
  .option('--config-path <path>', 'Custom configuration path')
  .action(async (options) => {
    try {
      const configManager = new ConfigManager(options.configPath);
      
      if (await configManager.exists()) {
        console.log('‚úì Configuration already exists at:', configManager.getConfigPath());
        return;
      }

      console.log('üöÄ Initializing RAG tool...');
      console.log('üìÅ Configuration directory:', configManager.getConfigDir());
      console.log('‚öôÔ∏è  Configuration file:', configManager.getConfigPath());
      console.log('üíæ Database file:', configManager.getDatabasePath());
      
      // For now, just create the directory
      await configManager.ensureConfigDir();
      console.log('‚úì Configuration directory created');
      console.log('');
      console.log('Next steps:');
      console.log('1. Set up your API keys');
      console.log('2. Run "rag-tool db-init" to initialize the database');
      console.log('3. Start adding documents with "rag-tool add <file>"');
      
    } catch (error) {
      console.error('‚ùå Initialization failed:', String(error));
      process.exit(1);
    }
  });

// Test command for configuration
program
  .command('config')
  .description('Show configuration information')
  .option('--config-path <path>', 'Custom configuration path')
  .action(async (options) => {
    try {
      const configManager = new ConfigManager(options.configPath);
      
      console.log('Configuration Information:');
      console.log('üìÅ Config directory:', configManager.getConfigDir());
      console.log('‚öôÔ∏è  Config file:', configManager.getConfigPath());
      console.log('üíæ Database file:', configManager.getDatabasePath());
      console.log('üìã Config exists:', await configManager.exists());
      
    } catch (error) {
      console.error('‚ùå Failed to show config:', String(error));
      process.exit(1);
    }
  });

// Placeholder commands for other functionality
program
  .command('db-init')
  .description('Initialize the database')
  .action(() => {
    console.log('üöß Database initialization not implemented yet');
  });

program
  .command('add <file>')
  .description('Add a document to the knowledge base')
  .action((file) => {
    console.log(`üöß Document addition not implemented yet: ${file}`);
  });

program
  .command('search <query>')
  .description('Search through documents')
  .action((query) => {
    console.log(`üöß Search not implemented yet: ${query}`);
  });

program
  .command('server')
  .description('Start MCP server')
  .action(() => {
    console.log('üöß MCP server not implemented yet');
  });

// Error handling
program.exitOverride();

try {
  program.parse();
} catch (error) {
  console.error('‚ùå Command failed:', String(error));
  process.exit(1);
}